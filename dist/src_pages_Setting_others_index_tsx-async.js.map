{"version":3,"sources":["src/pages/Setting/others/index.tsx","src/services/setting/others.ts"],"sourcesContent":["import BaseIndex from \"@/components/Base/BaseIndex\";\nimport BaseModel from \"@/components/Base/BaseModel\";\nimport BaseSearch from \"@/components/Base/BaseSearch\";\nimport BaseTable from \"@/components/Base/BaseTable\";\nimport {\n  _createCategory,\n  _getBannerVideo,\n  _getCategory,\n  _getPrivacyPolicy,\n  _getTermsCondition,\n  _postPrivacyPolicy,\n  _postTermsCondition,\n  _putPrivacyPolicy,\n  _putTermsCondition,\n  _updateBannerVideo,\n  _updateCategory,\n} from \"@/services/setting/others\";\nimport Helper from \"@/util/searchHelper\";\nimport { PlusSquareOutlined } from \"@ant-design/icons\";\nimport {\n  ActionType,\n  EditableFormInstance,\n  EditableProTable,\n  ProCard,\n  ProForm,\n  ProFormInstance,\n  ProFormSelect,\n  ProFormText,\n  ProFormTextArea,\n} from \"@ant-design/pro-components\";\nimport { useRequest } from \"@umijs/max\";\nimport { Button, FormInstance, message } from \"antd\";\nimport { DataSourceItemType } from \"antd/es/auto-complete\";\nimport React, { useEffect, useRef, useState } from \"react\";\nexport default function Index() {\n  /**********************************狀態管理**********************************/\n  const [tab, setTab] = useState(\"tab1\");\n\n  const [bannerFormReadOnly, setBannerFormReadOnly] = useState(true);\n\n  const bannerFormRef = useRef<FormInstance>();\n  const { refresh: BannerFormDataRefresh } = useRequest(_getBannerVideo, {\n    onSuccess: (res) => {\n      console.log(\"res\", res);\n      bannerFormRef.current?.setFieldsValue({ url: res[0].youtube_url[0] });\n    },\n  });\n  const actionRef = useRef<ActionType>();\n  const [searchKey, setSearchKey] = useState(\"\");\n  const [reload, setReload] = useState(() => actionRef.current?.reload);\n\n  const termsConditionActionRef = useRef<ActionType>();\n  const [termsConditionSearchKey, setTermsConditionSearchKey] = useState(\"\");\n  const [termsConditionReload, setTermsConditionReload] = useState(\n    () => termsConditionActionRef.current?.reload\n  );\n  useEffect(() => {\n    setReload(() => actionRef.current?.reload);\n  }, []);\n  /**********************************狀態管理**********************************/\n  /**********************************組件初始化**********************************/\n  const BannerVideoElement = () => {\n    return (\n      <ProForm\n        formRef={bannerFormRef}\n        onFinish={async (values) => {\n          try {\n            await _updateBannerVideo({ youtube_url: values.url });\n            message.success(\"Create faq success\");\n          } catch (error) {\n            message.error(\"Create faq failed\");\n          } finally {\n            BannerFormDataRefresh();\n            setBannerFormReadOnly(true);\n            return true;\n          }\n        }}\n        submitter={{\n          searchConfig: {\n            resetText: \"Cancel\",\n            submitText: \"Save\",\n          },\n          onReset: () => {\n            setBannerFormReadOnly(true);\n          },\n          render(props, dom) {\n            const editButton = (\n              <Button\n                type=\"primary\"\n                onClick={() => setBannerFormReadOnly(false)}\n              >\n                Edit\n              </Button>\n            );\n            if (bannerFormReadOnly) {\n              return editButton;\n            } else {\n              return dom;\n            }\n          },\n        }}\n        grid={true}\n        readonly={bannerFormReadOnly}\n      >\n        <ProFormText colProps={{ span: 12 }} label={\"Youtube url\"} name=\"url\" />\n      </ProForm>\n    );\n  };\n  const CategoryElement = () => {\n    return (\n      <EditableProTable\n        rowKey=\"_id\"\n        editable={{\n          type: \"single\",\n          onSave: async (key, record, originRow, newLineConfig) => {\n            console.log(\"record\", record);\n            if (record.isCreate) {\n              await _createCategory({\n                name: record.name,\n              });\n            } else {\n              await _updateCategory({\n                _id: record._id,\n                name: record.name,\n                isDisplay: record.isDisplay,\n              });\n            }\n            return true;\n          },\n        }}\n        recordCreatorProps={{\n          creatorButtonText: \"Create\",\n          record: (Index) => ({\n            _id: Index,\n            isCreate: true,\n            name: \"default name\",\n            isDisplay: true,\n          }),\n        }}\n        request={async () => {\n          const res = await _getCategory();\n          return { data: res.data, success: true };\n        }}\n        columns={[\n          {\n            title: \"Category name\",\n            dataIndex: \"name\",\n          },\n          {\n            title: \"IsDisplay\",\n            dataIndex: \"isDisplay\",\n            valueEnum: {\n              true: \"Show\",\n              false: \"Hidden\",\n            },\n          },\n          {\n            title: \"Action\",\n            valueType: \"option\",\n            width: 200,\n            render: (text, record, _, action) => [\n              <a\n                key=\"editable\"\n                onClick={() => {\n                  action?.startEditable?.(record._id, record);\n                }}\n              >\n                Edit\n              </a>,\n            ],\n          },\n        ]}\n      />\n    );\n  };\n  const PrivacyPolicyElement = () => {\n    return (\n      <div>\n        <BaseSearch\n          title=\"Search bar\"\n          submitFun={actionRef.current?.reload}\n          inputProps={{\n            value: searchKey,\n            onChange: ({ currentTarget: { value } }) => setSearchKey(value),\n          }}\n        />\n        <BaseTable<any>\n          searchKey={searchKey}\n          props={{\n            headerTitle: \"Privacy policy List\",\n            actionRef: actionRef,\n            optionsRender(props, defaultDom) {\n              const createFaq = (\n                <BaseModel<API_Setting.CreatePrivacyPolicy>\n                  allowUpdate={false}\n                  readOnly={false}\n                  modalFormProps={{\n                    onFinish: async (value) => {\n                      try {\n                        await _postPrivacyPolicy({ context: value.context });\n                        message.success(\"Create faq success\");\n                      } catch (error) {\n                        message.error(\"Create faq failed\");\n                      } finally {\n                        actionRef.current?.reload();\n                        return true;\n                      }\n                    },\n                    grid: true,\n                    trigger: (\n                      <Button icon={<PlusSquareOutlined />} type=\"text\" />\n                    ),\n                    submitter: {\n                      searchConfig: {\n                        resetText: \"Cancel\",\n                        submitText: \"Confirm\",\n                      },\n                    },\n                  }}\n                  title=\"New Part\"\n                >\n                  <ProFormTextArea\n                    colProps={{ span: 18 }}\n                    label=\"Context\"\n                    name=\"context\"\n                  />\n                </BaseModel>\n              );\n              return [createFaq, ...defaultDom];\n            },\n            columns: [\n              {\n                key: \"part\",\n                title: \"Part\",\n                dataIndex: \"part\",\n                width: \"10%\",\n                align: \"center\",\n                sorter: (a, b) => a.part - b.part,\n              },\n              {\n                key: \"context\",\n                title: \"Context\",\n                dataIndex: \"context\",\n                align: \"center\",\n                copyable: true,\n                width: \"80%\",\n                valueType: \"textarea\",\n                ellipsis: true,\n              },\n              {\n                title: \"Actions\",\n                dataIndex: \"action\",\n                key: \"action\",\n                render: (_, record) => (\n                  <span>\n                    <BaseModel<API_Setting.UpdatePrivacyPolicy>\n                      allowUpdate={false}\n                      readOnly={false}\n                      modalFormProps={{\n                        onFinish: async (value) => {\n                          try {\n                            await _putPrivacyPolicy({\n                              part: value.part,\n                              context: value.context,\n                            });\n                            message.success(\"Create faq success\");\n                          } catch (error) {\n                            message.error(\"Create faq failed\");\n                          } finally {\n                            actionRef.current?.reload();\n                            return true;\n                          }\n                        },\n                        grid: true,\n\n                        submitter: {\n                          searchConfig: {\n                            resetText: \"Cancel\",\n                            submitText: \"Confirm\",\n                          },\n                        },\n                      }}\n                      title=\"New Part\"\n                    >\n                      <ProFormText\n                        colProps={{ span: 18 }}\n                        label=\"Part\"\n                        name=\"part\"\n                        readonly={true}\n                        initialValue={record.part}\n                      />\n                      <ProFormTextArea\n                        colProps={{ span: 18 }}\n                        label=\"Context\"\n                        initialValue={record.context}\n                        name=\"context\"\n                      />\n                    </BaseModel>\n                  </span>\n                ),\n                align: \"center\",\n              },\n            ],\n            request: async () => {\n              const dataSource = await _getPrivacyPolicy().then(({ data }) => {\n                return {\n                  success: true,\n                  data: data,\n                };\n              });\n              if (searchKey) {\n                dataSource.data = Helper<Page_org.mainTable>({\n                  dataSource: dataSource.data,\n                  keyWord: searchKey,\n                }) as Page_org.mainTable[];\n\n                return dataSource;\n              } else {\n                return dataSource;\n              }\n            },\n          }}\n        />\n      </div>\n    );\n  };\n  const TermsConditionElement = () => {\n    return (\n      <div>\n        <BaseSearch\n          title=\"Search bar\"\n          submitFun={termsConditionActionRef.current?.reload}\n          inputProps={{\n            value: termsConditionSearchKey,\n            onChange: ({ currentTarget: { value } }) =>\n              setTermsConditionSearchKey(value),\n          }}\n        />\n        <BaseTable<any>\n          searchKey={termsConditionSearchKey}\n          props={{\n            headerTitle: \"Terms & Conditions List\",\n            actionRef: termsConditionActionRef,\n            optionsRender(props, defaultDom) {\n              const createTermsCondition = (\n                <BaseModel<API_Setting.CreateTermsCondition>\n                  allowUpdate={false}\n                  readOnly={false}\n                  modalFormProps={{\n                    onFinish: async (value) => {\n                      try {\n                        await _postTermsCondition({ context: value.context });\n                        message.success(\"Create faq success\");\n                      } catch (error) {\n                        message.error(\"Create faq failed\");\n                      } finally {\n                        termsConditionActionRef.current?.reload();\n                        return true;\n                      }\n                    },\n                    grid: true,\n                    trigger: (\n                      <Button icon={<PlusSquareOutlined />} type=\"text\" />\n                    ),\n                    submitter: {\n                      searchConfig: {\n                        resetText: \"Cancel\",\n                        submitText: \"Confirm\",\n                      },\n                    },\n                  }}\n                  title=\"New Part\"\n                >\n                  <ProFormTextArea\n                    colProps={{ span: 18 }}\n                    label=\"Context\"\n                    name=\"context\"\n                  />\n                </BaseModel>\n              );\n              return [createTermsCondition, ...defaultDom];\n            },\n            columns: [\n              {\n                key: \"part\",\n                title: \"Part\",\n                dataIndex: \"part\",\n                width: \"10%\",\n                align: \"center\",\n                sorter: (a, b) => a.part - b.part,\n              },\n              {\n                key: \"context\",\n                title: \"Context\",\n                dataIndex: \"context\",\n                align: \"center\",\n                copyable: true,\n                width: \"80%\",\n                valueType: \"textarea\",\n                ellipsis: true,\n              },\n              {\n                title: \"Actions\",\n                dataIndex: \"action\",\n                key: \"action\",\n                render: (_, record) => (\n                  <span>\n                    <BaseModel<API_Setting.UpdateTermsCondition>\n                      allowUpdate={false}\n                      readOnly={false}\n                      modalFormProps={{\n                        onFinish: async (value) => {\n                          try {\n                            await _putTermsCondition({\n                              part: value.part,\n                              context: value.context,\n                            });\n                            message.success(\"Create faq success\");\n                          } catch (error) {\n                            message.error(\"Create faq failed\");\n                          } finally {\n                            termsConditionActionRef.current?.reload();\n                            return true;\n                          }\n                        },\n                        grid: true,\n\n                        submitter: {\n                          searchConfig: {\n                            resetText: \"Cancel\",\n                            submitText: \"Confirm\",\n                          },\n                        },\n                      }}\n                      title=\"New Part\"\n                    >\n                      <ProFormText\n                        colProps={{ span: 18 }}\n                        label=\"Part\"\n                        name=\"part\"\n                        readonly={true}\n                        initialValue={record.part}\n                      />\n                      <ProFormTextArea\n                        colProps={{ span: 18 }}\n                        label=\"Context\"\n                        initialValue={record.context}\n                        name=\"context\"\n                      />\n                    </BaseModel>\n                  </span>\n                ),\n                align: \"center\",\n              },\n            ],\n            request: async () => {\n              const dataSource = await _getTermsCondition().then(({ data }) => {\n                return {\n                  success: true,\n                  data: data,\n                };\n              });\n              if (termsConditionSearchKey) {\n                dataSource.data = Helper<Page_org.mainTable>({\n                  dataSource: dataSource.data,\n                  keyWord: termsConditionSearchKey,\n                }) as Page_org.mainTable[];\n\n                return dataSource;\n              } else {\n                return dataSource;\n              }\n            },\n          }}\n        />\n      </div>\n    );\n  };\n  /**********************************組件初始化**********************************/\n  /**********************************異步函數**********************************/\n  /**********************************異步函數**********************************/\n  return (\n    <BaseIndex title=\"Other settings\">\n      <ProCard\n        title=\"Settings card\"\n        headStyle={{ paddingBottom: 24 }}\n        style={{ minHeight: \"90vh\" }}\n        tabs={{\n          tabPosition: \"left\",\n          activeKey: tab,\n          items: [\n            {\n              label: `Banner video`,\n              key: \"tab1\",\n\n              children: BannerVideoElement(),\n            },\n            {\n              label: `Category`,\n              key: \"tab2\",\n              children: CategoryElement(),\n            },\n            {\n              label: `Privacy policy`,\n              key: \"tab3\",\n              children: PrivacyPolicyElement(),\n            },\n            {\n              label: `Terms & Conditions`,\n              key: \"tab4\",\n              children: TermsConditionElement(),\n            },\n          ],\n          onChange: (key) => {\n            setTab(key);\n          },\n        }}\n      />\n    </BaseIndex>\n  );\n}\n//\n","import { request } from \"@umijs/max\";\n\nexport const _getBannerVideo = async (): Promise<API.DefaultObjectResponse> => {\n  const result = await request(`/api/v1/global/public/cms/9527`, {\n    method: \"get\",\n  });\n  return {\n    data: result,\n    status: true,\n    code: 200,\n  };\n};\nexport const _getCategory = async (): Promise<API.DefaultObjectResponse> => {\n  return await request(`/api/v1/admin/private/category`, {\n    method: \"get\",\n  });\n};\n\nexport const _updateBannerVideo = async (values: {\n  youtube_url: string;\n}): Promise<API.DefaultObjectResponse> => {\n  const result = await request(`/api/v1/admin/private/cms/banner`, {\n    method: \"put\",\n    params: {\n      url: values.youtube_url,\n    },\n  });\n  return {\n    data: result,\n    status: true,\n    code: 200,\n  };\n};\nexport const _updateCategory = async (values: {\n  _id: string;\n  name: string;\n  isDisplay: boolean;\n}): Promise<API.DefaultObjectResponse> => {\n  return await request(`/api/v1/admin/private/category`, {\n    method: \"put\",\n    data: { ...values, isDisplay: JSON.parse(values.isDisplay as any) },\n  });\n};\nexport const _createCategory = async (values: {\n  name: string;\n}): Promise<API.DefaultObjectResponse> => {\n  return await request(`/api/v1/admin/private/category`, {\n    method: \"post\",\n    params: { name: values.name },\n  });\n};\n\nexport const _getPrivacyPolicy =\n  async (): Promise<API.DefaultObjectResponse> => {\n    return await request(`/api/v1/admin/private/privacy`, {\n      method: \"get\",\n    });\n  };\n\nexport const _postPrivacyPolicy = async (values: {\n  context: string;\n}): Promise<API.DefaultObjectResponse> => {\n  return await request(`/api/v1/admin/private/privacy`, {\n    method: \"post\",\n    data: { context: values.context },\n  });\n};\n\nexport const _putPrivacyPolicy = async (values: {\n  part: number;\n  context: string;\n}): Promise<API.DefaultObjectResponse> => {\n  return await request(`/api/v1/admin/private/privacy`, {\n    method: \"put\",\n    data: { context: values.context, part: values.part },\n  });\n};\nexport const _getTermsCondition =\n  async (): Promise<API.DefaultObjectResponse> => {\n    return await request(`/api/v1/admin/private/termsCondition`, {\n      method: \"get\",\n    });\n  };\n\nexport const _postTermsCondition = async (values: {\n  context: string;\n}): Promise<API.DefaultObjectResponse> => {\n  return await request(`/api/v1/admin/private/termsCondition`, {\n    method: \"post\",\n    data: { context: values.context },\n  });\n};\n\nexport const _putTermsCondition = async (values: {\n  part: number;\n  context: string;\n}): Promise<API.DefaultObjectResponse> => {\n  return await request(`/api/v1/admin/private/termsCondition`, {\n    method: \"put\",\n    data: { context: values.context, part: values.part },\n  });\n};\n"],"names":[],"mappings":"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"}